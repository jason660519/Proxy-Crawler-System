# 簡化版 Docker Compose 配置
# 精簡配置方案 - 保持核心功能，大幅降低複雜度

version: '3.8'

services:
  # PostgreSQL 資料庫 - 核心必需
  postgres:
    image: postgres:15-alpine
    container_name: proxy_postgres_simple
    environment:
      POSTGRES_USER: proxyadmin
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: proxypool
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U proxyadmin"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - proxy_network

  # Redis 快取 - 性能優化必需
  redis:
    image: redis:7-alpine
    container_name: proxy_redis_simple
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - proxy_network
    command: redis-server --appendonly yes

  # 整合後端應用 - 包含所有 API 和轉換功能
  app:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: proxy_app_simple
    environment:
      # 資料庫配置
      - DATABASE_URL=postgresql://proxyadmin:password123@postgres:5432/proxypool
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=proxyadmin
      - DB_PASSWORD=password123
      - DB_NAME=proxypool
      
      # Redis 配置
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # 應用配置
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      
      # 功能開關
      - ENABLE_HTML_CONVERSION=true
      - ENABLE_PROXY_VALIDATION=true
      - ENABLE_ANALYTICS=true
      
    ports:
      - "8000:8000"  # 主 API
      - "8080:8080"  # Web 界面
    
    volumes:
      # 日誌和資料目錄
      - ./logs:/app/logs
      - ./data:/app/data
      # 配置文件（如果需要自定義）
      - ./config:/app/config:ro
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
        
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    restart: unless-stopped
    networks:
      - proxy_network

  # 可選：輕量級 Web 界面（靜態文件服務）
  web:
    image: nginx:alpine
    container_name: proxy_web_simple
    ports:
      - "3000:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./docker/nginx/simple.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - proxy_network
    profiles:
      - web  # 使用 --profile web 啟動

# 可選管理工具（僅在需要時啟動）
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: proxy_pgadmin_simple
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@proxy.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - proxy_network
    profiles:
      - tools  # 使用 --profile tools 啟動

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  proxy_network:
    driver: bridge
    name: proxy_simple_network